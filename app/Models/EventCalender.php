<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Models\BaseModel;
use App\Models\EventCategory;
use Carbon\Carbon;
use Auth;
use URL;
use Log;
use DB;

class EventCalender extends BaseModel
{
    use HasFactory;
    protected static $table_name = 'event_calenders';
    protected $table = "event_calenders";
    public $class_name = 'App\Models\EventCalender';
    public $class_dynamic = true;
    protected $has_images = true;
    public $status_col = 'is_approved';
    private $eventCategory;

    protected $fillable = [
        'title','description','is_active','is_delete','is_approved','event_date','price','venue','user_id',
        'slug','time','city','booking_link','category_id'
    ];

    protected $rules = [];
    public function __construct(){
        parent::__construct();
        $this->setRules();
        $this->setOrderBy('event_date');
        $this->setOrder('asc');
        $this->eventCategory = new EventCategory();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        $table = static::$table_name;
        $today = Carbon::now()->format('Y-m-d');

        // $after = Carbon::now()->addMonth(config('site_config.constants.events_month_range'))->format('Y-m-d');
        static::addGlobalScope('active_events', function (Builder $builder) use ($table,$today) {
            $user = Auth::user();
            $url = URL::current();
            if(isset($user) && $user->hasRole('admin')){
                $builder->where($table.'.is_delete', '=', 0);
            }else if(isset($user) && (str_contains($url,"user"))){
                $builder->where($table.'.is_delete', '=', 0)->where($table.'.is_active','=',1)->where('user_id',$user->id);
            }else{
                $builder->where($table.'.is_delete', '=', 0)->where($table.'.is_active','=',1)->where($table.'.is_approved',1)->where('event_date','>=',$today);
            }
        });
    }


    public function getRecordDataTable($request){
        if($request->has('search') && $request->search !=''){
            $this->setFilters(['title','like','%'.$request->search.'%']);
        }

        $condition = [];
        $result = [];
        $this->setSelectedColumn(['id','title','created_at','is_active','is_approved','event_date','time','city','venue','price']);

        $this->setRenderColumn([
            [
                'name' => 'id',
                'db_name' => 'id',
                'type' => 'integer',
                'html' => false,
            ],
            [
                'name' => 'title',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'slug',

            ],
            [
                'name' => 'event_date',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'event_date',

            ],
            [
                'name' => 'time',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'time',

            ],
            [
                'name' => 'city',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'city',

            ],
            [
                'name' => 'venue',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'venue',

            ],
            [
                'name' => 'price',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'price',

            ],

            [
                'name' => 'created_at',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'is_active',
                'type' => 'boolean',
                'html' => false,

            ],
            [
                'name' => 'is_approved',
                'type' => 'boolean',
                'html' => true,
                'condition_column' => 'is_approved',
                'class_dynamic' => false,
            ],


        ]);

        $result = $this->getAllDatatables([],
        $this->getSelectedColumns(),
        [],'',[]);

        return $result;
    }
    public function user(){
        return $this->belongsTo(User::class);
    }

    // public function getEventDateAttribute()
    // {
    //     if(!request()->id && !request()->slug)
    //         return Carbon::parse($this->attributes['event_date'])->format(config('constant.date_format'));
    //     return $this->attributes['event_date'];
    // }


    public function setTitleAttribute($title)
    {
        $slug = preg_replace("![^a-z0-9]+!i", "-", strtolower($title));

        if(isset($this->id)){
            $obj = self::where('slug',$slug)->where('id','!=',$this->id)->first();
            $this->attributes['slug'] = $slug.'-'.((int)$this->id);
           
          
        }
        $obj = self::where('slug',$slug)->first();
        if(isset($obj)){
            $this->attributes['slug'] = $slug.'-'.((int)$obj->id+1);
           
        }
        $this->attributes['slug'] = $slug;
        $this->attributes['title'] = $title;
    }

    public function getCategories(){
        try{
            $this->eventCategory->setLength(1000);
            return $this->eventCategory->getAll([],['id','name as text']);
        }catch(Exception $e){
            Log::error($e);
            return [];
        }
    }

    public function addBookings($data){
        try{
            DB::enableQueryLog();
            // $data['event_id'] = $this->id;
            $status = DB::table('bookings')->insertGetId($data);
            Log::debug(DB::getQueryLog());
            DB::commit();
            return $status;
        }catch(\Exception $e){
            Log::error($e);
            return 0;
        }
    }
}
