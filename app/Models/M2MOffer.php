<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Models\BaseModel;
use Auth;
use URL;

class M2MOffer extends BaseModel
{
    use HasFactory;
    protected static $table_name = 'm2m_offers';
    protected $table = "m2m_offers";
    public $class_name = 'App\Models\M2MOffer';
    public $class_dynamic = true;
    protected $has_images = true;
    public $status_col = 'is_approved';


    protected $fillable = [
        'company_name','first_name','last_name','offer_details','phone','email','web_url','is_approved','user_id'
    ];

    protected $rules = [];
    public function __construct(){
        parent::__construct();
        $this->setRules();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        $table = static::$table_name;
        static::addGlobalScope('active_directories', function (Builder $builder) use($table){
            $user = Auth::user();
            $url = URL::current();
            if(isset($user) && $user->hasRole('admin')){
                $builder->where($table.'.is_delete', '=', 0);
            }
            else if(isset($user) && (str_contains($url,"user"))){
                $builder->where($table.'.is_delete', '=', 0)->where($table.'.is_active','=',1)->where('user_id',$user->id);
            }
            else{
                $builder->where($table.'.is_delete', '=', 0)->where($table.'.is_active','=',1)->where($table.'.is_approved',1);
            }

        });
    }


    public function getRecordDataTable($request){
        if($request->has('search') && $request->search !=''){
            $this->setFilters(['company_name','like','%'.$request->search.'%']);
        }

        $condition = [];
        $result = [];
        $this->setSelectedColumn(['id','company_name','phone','first_name','last_name','web_url','email','offer_details','created_at','is_active','is_approved']);

        $this->setRenderColumn([
            [
                'name' => 'id',
                'db_name' => 'id',
                'type' => 'integer',
                'html' => false,
            ],
            [
                'name' => 'company_name',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'company_name',

            ],
            [
                'name' => 'email',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'email',

            ],
            [
                'name' => 'first_name',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'first_name',

            ],
            [
                'name' => 'last_name',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'last_name',

            ],
            [
                'name' => 'phone',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'phone',

            ],
            [
                'name' => 'web_url',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'web_url',

            ],
            [
                'name' => 'offer_details',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'offer_details',

            ],
            [
                'name' => 'created_at',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'is_active',
                'type' => 'boolean',
                'html' => false,

            ],
            [
                'name' => 'is_approved',
                'type' => 'boolean',
                'html' => true,
                'condition_column' => 'is_approved',
                'class_dynamic' => false,
            ],


        ]);

        $result = $this->getAllDatatables([],
        $this->getSelectedColumns(),
        [],'',[]);

        return $result;
    }
    public function user(){
        return $this->belongsTo(User::class,'user_id');
    }

    public function setCompanyNameAttribute($title)
    {
        $slug = preg_replace("![^a-z0-9]+!i", "-", strtolower($title));

        if(isset($this->id)){
            $obj = self::where('slug',$slug)->where('id','!=',$this->id)->first();
            $this->attributes['slug'] = $slug.'-'.((int)$this->id);
           
          
        }
        $obj = self::where('slug',$slug)->first();
        if(isset($obj)){
            $this->attributes['slug'] = $slug.'-'.((int)$obj->id+1);
           
        }
        $this->attributes['slug'] = $slug;
        $this->attributes['title'] = $title;
    }
}
