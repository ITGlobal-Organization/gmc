<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Models\BaseModel;
use App\Models\Category;
use Auth;
use DB;
use Log;

class Directory extends BaseModel
{
    use HasFactory;
    protected static $table_name = 'directories';
    protected $table = "directories";
    public $class_name = 'App\Models\Directory';
    public $class_dynamic = true;
    protected $has_images = true;
    public $status_col = 'is_approved';

    protected $fillable = [
        'title','description','is_active','is_delete','is_approved','user_id','slug','category_id',
        'mobile_no','phone','address','web_url','facebook_url','instagram_url','linkedin_url','youtube_url'
    ];

    protected $rules = [];
    public function __construct(){
        parent::__construct();
        $this->setRules();
        $this->setOrderBy('title');
        $this->setOrder('asc');
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        $table = static::$table_name;
        static::addGlobalScope('active_directories', function (Builder $builder) use ($table){
            $user = Auth::user();
            if(isset($user) && $user->hasRole('admin')){
                $builder->where($table.'.is_delete', '=', 0);
            }else{
                $builder->where($table.'.is_delete', '=', 0)->where($table.'.is_active','=',1)->where($table.'.is_approved',1);
            }

        });
    }


    public function getRecordDataTable($request){
        if($request->has('search') && $request->search !=''){
            $this->setFilters(['title','like','%'.$request->search.'%']);
        }

        $condition = [];
        $result = [];
        $this->setSelectedColumn(['directories.id','directories.title','directories.created_at','directories.is_active','directories.is_approved','directories.mobile_no','directories.address','directories.web_url','directories.email']);

        $this->setRenderColumn([
            [
                'name' => 'id',
                'db_name' => 'id',
                'type' => 'integer',
                'html' => false,
            ],
            [
                'name' => 'title',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'slug',

            ],
            [
                'name' => 'email',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'email',

            ],
            [
                'name' => 'address',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'address',

            ],
            [
                'name' => 'mobile_no',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'mobile_no',

            ],
            [
                'name' => 'web_url',
                'type' => 'string',
                'html' => false,
                'link' => 'property',
                'link_column' => 'web_url',

            ],

            // [
            //     'name' => 'slug',
            //     'type' => 'string',
            //     'html' => false,
            // ],
            // [
            //     'name' => 'publish_at',
            //     'type' => 'string',
            //     'html' => false,
            // ],
            // [
            //     'name' => 'publisher',
            //     'type' => 'string',
            //     'html' => false,
            // ],


            [
                'name' => 'created_at',
                'type' => 'string',
                'html' => false,
            ],
            [
                'name' => 'is_active',
                'type' => 'boolean',
                'html' => false,

            ],
            [
                'name' => 'is_approved',
                'type' => 'boolean',
                'html' => true,
                'condition_column' => 'is_approved',
                'class_dynamic' => false,
            ],


        ]);

        $result = $this->getAllDatatables([],
        $this->getSelectedColumns(),
        [],'',[]);

        return $result;
    }

    public function setTitleAttribute($title)
    {
        $slug = preg_replace("![^a-z0-9]+!i", "-", strtolower($title));

        if(isset($this->id)){
            $obj = self::where('slug',$slug)->where('id','!=',$this->id)->first();
            $this->attributes['slug'] = $slug.'-'.((int)$this->id);
           
          
        }
        $obj = self::where('slug',$slug)->first();
        if(isset($obj)){
            $this->attributes['slug'] = $slug.'-'.((int)$obj->id+1);
           
        }
        $this->attributes['slug'] = $slug;
        $this->attributes['title'] = $title;
    }
    public function user(){
        return $this->belongsTo(User::class,'user_id');
    }

    public function addRelTableRecord($rel_id,$table,$col){

        try{
             return DB::table($table)->insert([
                'directory_id' => $this->id,
                $col => $rel_id,
                'is_delete' => 0,
                'is_active' => 1
            ]);
        }catch(\Exception $e){
            LOG::error($e);
            return 0;
        }

    }

    public function deleteRelTableRecord($table){

        try{
             return DB::table($table)->where([
                'directory_id' => $this->id,
            ])->delete();
        }catch(\Exception $e){
            LOG::error($e);
            return 0;
        }

    }

    public function getRelTableRecord($table,$col){
        try{
            // dd($this->id);
            return DB::table($table)
            ->select($col)
            ->where([
               'directory_id' => $this->id,
           ])->pluck($col);
       }catch(\Exception $e){

        Log::error($e);
           return null;
       }
    }


    // pivot relation
    public function categories(){
        return $this->belongsToMany(Category::class,'category_directory');
    }
}
