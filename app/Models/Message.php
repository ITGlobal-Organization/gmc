<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\BaseModel;
use Illuminate\Database\Eloquent\Builder;
use DB;
use Log;
use Auth;
use URL;

class Message extends BaseModel
{
    use HasFactory;

    use HasFactory;
    protected static $table_name = 'messages';
    protected $table = "messages";
    public $class_name = 'App\Models\Message';
    public $class_dynamic = true;
    protected $has_images = true;
    public $status_col = 'is_active';


    protected $fillable = [
        'sender_id','reciever_id','message','is_active','is_delete','created_at','updated_at'
    ];

    protected $rules = [];
    public function __construct(){
        parent::__construct();
        $this->setRules();
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        $table = static::$table_name;
        static::addGlobalScope('active_messages', function (Builder $builder) use($table){
            $user = Auth::user();
            $url = URL::current();
            if(isset($user) && $user->hasRole('admin')){
                $builder->where($table.'.is_delete', '=', 0);
            }
            else{
                $builder->where($table.'.is_delete', '=', 0)->where($table.'.is_active','=',1);
            }

        });
    }

    public function getMessagesUsers($user,$page=0,$pages=0){
        try{
            $params = [$user,$page,$pages];
            // dd($params);
            $data = $this->callProcedure("users_mesage_list",$params);
            if(isset($data))
                return $data;
            else 
                return [];
        }catch(Exception $e){
            return [];
        }
    }

    public function getMessages($user){
        try{
            DB::enableQueryLog();
            $params = [auth()->user()->id,$user];
            // dd($params);
            $data = $this->callProcedure("messages",$params);
            Log::debug(DB::getQueryLog());
            if(isset($data))
                return $data;
            else 
                return [];
        }catch(Exception $e){
            Log::error($e->getMessages());
            return [];
        }
    }

    public function markasReadMessage($data,$sender,$reciever){
        try{
            DB::enableQueryLog();
           $status = static::where([
                'sender_id' => $sender,
                'reciever_id' => $reciever
            ])->where('is_read','=',0)
            ->update($data);
            // dd(DB::getQueryLog());
        
            Log::debug(DB::getQueryLog());
            return $status;
        }catch(Exception $e){
            // dd($e);
            Log::error($e->getMessages());
            return 0;
        }
        
    }
}
